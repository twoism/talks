Odie - Deep Dive
Lyft HQ - SF

Christopher Burnett
Lyft, Core Libraries
cburnett@lyft.com

* Odie

* Odie

- Driver agnostic Object Document Mapper (ODM)
- Fluent MongoDB and DynamoDB API
- Proto3 based model definition

* Why build this?

* Why build this?

- DynamoDB is awesome but the API is terrible
- We need something like Doctrine in GO
- Unified API makes migrations pleasant 
- Because it's awesome

* Jargon

Repository (repo)

- High level, type safe datastore access
- Highly extensible (Events, Decorators)
- Generated via protoc plugin
- Lives in lyft-idl

* Jargon 

Model

- Datastore aware Go struct
- Protobuf counterpart
- Changeset/Dirty tracking

* Jargon

Client

- Low level datastore access
- Not type safe (interface{})
- Highly extensible

* Jargon

Event (or Hook)

- Pre and Post for all actions
- Ported from Doctrine
- Encourage bad design

* Odie clients

* Odie clients

- Foundation for repositories
- Fluent API for datastore operations
- Metrics baked in by default

* Odie clients (DynamoDB)

.code dynamo_client.go

* Odie clients (MongoDB)

.code mongo_client.go

* WTF is imgo?

* First off, MongoDB

.image mongo.gif 550 _

* mgo

.image tirefire.gif 500 _

* mgo

- mgo is trash
- (nearly) impossible to mock
- it's the best we got

* imgo

.link http://github.com/lyft/imgo

- Exposes interfaces for all of mgo
- Built in mocking
- Transparent upgrading
- Heroic effort by @croche

* imgo

.code imgo_test.go

* BTW, stop testing all the way through to the DB!

* No, really. Stop

* Back to Odie...

* Defining a model

- Custom proto3 annotations
- Cross driver specific field options
- Integrates seamlessly into lyft-idl

* Defining a model

.code user.proto

* Generated code

	├── test_repo
	│   ├── dynamodb
	│   │   ├── del.odie.go
	│   │   ├── events.odie.go
	│   │   ├── get.odie.go
	│   │   ├── hooks.odie.go
	│   │   ├── put.odie.go
	│   │   ├── query.odie.go
	│   │   ├── repo.odie.go // <- the dynamodb repo
	│   │   ├── scan.odie.go
	│   │   └── update.odie.go
	│   └── mongodb
	│       ├── del.odie.go
	│       ├── events.odie.go
	│       ├── get.odie.go
	│       ├── hooks.odie.go
	│       ├── put.odie.go
	│       ├── query.odie.go
	│       ├── repo.odie.go // <- the mongodb repo
	│       └── update.odie.go
	├── test_repo.odie.go // <- the model
	└── test_repo.pb.go   // <- the protobuf

* Type safety comes at a cost

- Go template based
- Walks the proto3 AST
- Mostly delegation code
- Generics would be nice

* Codegen

.code query_builder.go

.code codegen.go

* Repo operations

.code repo_iface.go

* Usage

.code repo.go

* Queries

- Unified Dynamo and Mongo APIs (Almost)
- Type safe inversion pattern
- Lovingly crafted for Lyft

* Queries

.code exp.go

* Queries

.code queries.go

* Lifecycle Events

* Lifecycle Events

- Pre and Post hooks for all operations
- Interface implementation
- Errors halt the call chain
- Built with client Decorators

* Side note, please stop doing this

* OOP is your friend and delegates are way easier to reason about. Seriously.

* Know a Liskov

.image liskov.jpg 550 _

* Anyway...

* Example (PrePut)

.code validate.go

* Decorators

- Client and Repo implementations
- Per operation application
- "middleware" like
- Event hooks are probably fine

* Decorators (Client)

.code decorator.go

* Decorators (Per operation)

.code op_decorator.go

* Ch, Ch, Ch... Changesets

.image changes.jpg 550 _

* Changesets

- Ported from Doctrine (Unit of work)
- Built into models by default
- Implemented with a client Decorator
- Pretty cool, not Bowie cool though :-(

* Changesets

.code changesets.go

* Changesets

.code changes.go

* Changesets

You get them for free

.code commit.go

* gRPC/Proto fluency

- Models can be sent via `ToProto`
- Protos can be ingested via `ToModel`
- This is dope

.code proto.go

* Metrics

* Metrics

- success/failure counters
- per operation histograms

* Metrics

.code metrics.go

* Metrics

	odie_test.odie.mongodb.get:1|c
	odie_test.odie.mongodb.get.success:1|c
	odie_test.odie.mongodb.get:245.000000|ms

* Future plans

- Codegen CRUD RPC
- RPC datastore adapters
- 







